#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 2FA –∫–æ–¥–æ–≤
"""

import os
import hashlib
import base64
import pyotp
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∏—Ç—å TOTP_SECRET –∏–∑ .env
def load_env():
    env_vars = {}
    try:
        with open('.env', 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    env_vars[key] = value
    except FileNotFoundError:
        print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    return env_vars.get('TOTP_SECRET')

def get_user_secret(username="admin"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    totp_secret = load_env()
    if not totp_secret:
        return None
    
    combined = f"{totp_secret}:{username}"
    hash_bytes = hashlib.sha256(combined.encode()).digest()
    secret = base64.b32encode(hash_bytes[:20]).decode()
    return secret

def main():
    print("üîê 2FA Debug Tool")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç
    secret = get_user_secret()
    if not secret:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å TOTP_SECRET")
        return
    
    print(f"üì± –°–µ–∫—Ä–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {secret}")
    print(f"üì± –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤: {secret[:8]}...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥
    totp = pyotp.TOTP(secret)
    current_code = totp.now()
    
    print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now()}")
    print(f"üî¢ –¢–µ–∫—É—â–∏–π –∫–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞: {current_code}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ URI
    uri = totp.provisioning_uri(
        name="admin",
        issuer_name="RIT-UTILS"
    )
    print(f"üîó QR –∫–æ–¥ URI: {uri}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤:")
    test_token = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ").strip()
    
    if test_token:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
        for window in [0, 1, 2, 3]:
            result = totp.verify(test_token, valid_window=window)
            print(f"   Window {window}: {result}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–æ–¥—ã
        import time
        current_time = int(time.time())
        print(f"\n‚è∞ –ö–æ–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏:")
        for offset in [-2, -1, 0, 1, 2]:
            test_time = current_time + (offset * 30)
            code_at_time = totp.at(test_time)
            print(f"   {offset*30:+3}s: {code_at_time}")

if __name__ == "__main__":
    main()
