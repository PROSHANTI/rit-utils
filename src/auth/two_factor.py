import os
import pyotp
import qrcode
import base64
import hashlib
from io import BytesIO
from fastapi import Request, Form
from fastapi.responses import RedirectResponse
from fastapi.templating import Jinja2Templates
from .cookie_utils import set_secure_cookie, delete_secure_cookie, get_cookie_settings

import src.config  # noqa: F401

templates = Jinja2Templates(directory="templates")

TOTP_SECRET = os.getenv('TOTP_SECRET')
if not TOTP_SECRET:
    raise ValueError(
        "TOTP_SECRET –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. "
        "–î–æ–±–∞–≤—å—Ç–µ TOTP_SECRET –≤ .env —Ñ–∞–π–ª. "
        "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∫—Ä–µ—Ç: python -c 'import pyotp; print(pyotp.random_base32())'"
    )

USER_SECRETS: dict[str, str] = {}

def generate_totp_secret() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è TOTP"""
    return pyotp.random_base32()

def get_user_secret(username: str, generate_if_missing: bool = True) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        username: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        generate_if_missing: –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    
    Returns:
        Base32 —Å–µ–∫—Ä–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if username not in USER_SECRETS:
        if generate_if_missing:
            combined = f"{TOTP_SECRET}:{username}"
            hash_bytes = hashlib.sha256(combined.encode()).digest()
            
            secret = base64.b32encode(hash_bytes[:20]).decode()
            USER_SECRETS[username] = secret
        else:
            return TOTP_SECRET or ""
    
    return USER_SECRETS[username]

def get_totp_uri(username: str, secret: str | None = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç URI –¥–ª—è QR-–∫–æ–¥–∞
    
    Args:
        username: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        secret: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
    
    Returns:
        URI –¥–ª—è QR-–∫–æ–¥–∞
    """
    if secret is None:
        secret = get_user_secret(username)
    
    totp = pyotp.TOTP(secret)
    uri = totp.provisioning_uri(
        name=username,
        issuer_name="RIT-UTILS"
    )
    return uri

def generate_qr_code(uri: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –≤ base64"""
    try:
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(uri)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        buffer = BytesIO()
        img.save(buffer, "PNG")  # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä format=
        buffer.seek(0)
        
        qr_base64 = base64.b64encode(buffer.getvalue()).decode()
        return qr_base64
    except Exception:
        return ""

def verify_totp(token: str, username: str = "admin", secret: str | None = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç TOTP —Ç–æ–∫–µ–Ω
    
    Args:
        token: 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        username: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–∞)
        secret: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è
    
    Returns:
        True –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
    """
    try:
        if secret is None:
            secret = get_user_secret(username, generate_if_missing=False)
        
        print(f"üîê TOTP Debug:")
        print(f"   Token: {token}")
        print(f"   Secret: {secret}")
        print(f"   Username: {username}")
        
        totp = pyotp.TOTP(secret)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –æ–∫–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (¬±2 –ø–µ—Ä–∏–æ–¥–∞ = ¬±60 —Å–µ–∫—É–Ω–¥)
        result = totp.verify(token, valid_window=2)
        
        print(f"   Current server code: {totp.now()}")
        print(f"   Verification result: {result}")
        
        return result
    except Exception as e:
        print(f"‚ùå TOTP Error: {e}")
        return False

def two_factor_handler(request: Request, token: str = Form(...)):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 2FA"""
    username = "admin"

    user_secret = request.cookies.get("user_totp_secret")
    
    print(f"üç™ 2FA Handler Debug:")
    print(f"   Token from form: {token}")
    print(f"   User secret from cookie: {user_secret}")
    
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    global_secret = get_user_secret(username)
    print(f"   Global secret: {global_secret}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ cookie —Å–µ–∫—Ä–µ—Ç, –ø–æ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π
    if user_secret and verify_totp(token, username, user_secret):
        print("‚úÖ Verification successful with cookie secret")
        response = RedirectResponse(url="/setup-session", status_code=303)
        set_secure_cookie(response, request, "2fa_verified", "true")
        return response
    elif verify_totp(token, username, global_secret):
        print("‚úÖ Verification successful with global secret")
        response = RedirectResponse(url="/setup-session", status_code=303)
        set_secure_cookie(response, request, "2fa_verified", "true")
        return response
    
    print("‚ùå Both verification attempts failed")
    return templates.TemplateResponse(
        "two_factor.html",
        {"request": request, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA"},
        status_code=401
    )

def show_two_factor_page(request: Request):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–≤–æ–¥–∞ 2FA"""
    return templates.TemplateResponse(
        "two_factor.html",
        {"request": request}
    )

def is_2fa_verified(request: Request) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–∞ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2FA"""
    return request.cookies.get("2fa_verified") == "true"

def clear_2fa_verification(request: Request) -> RedirectResponse:
    """–û—á–∏—â–∞–µ—Ç 2FA –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
    response = RedirectResponse(url="/", status_code=303)
    response.delete_cookie(
        "2fa_verified", httponly=True, secure=True, samesite="strict"
        )
    return response
