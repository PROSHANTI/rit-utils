#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTPS —Å Let's Encrypt –¥–ª—è RIT-Utils

set -e

echo "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS —Å Let's Encrypt..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞
read -p "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com): " DOMAIN

if [ -z "$DOMAIN" ]; then
    echo "‚ùå –î–æ–º–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!"
    exit 1
fi

echo "üåê –î–æ–º–µ–Ω: $DOMAIN"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Certbot
check_certbot() {
    echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Certbot..."
    
    if ! command -v certbot &> /dev/null; then
        echo "‚ùå Certbot –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞..."
        sudo apt update
        sudo apt install -y certbot python3-certbot-nginx
        echo "‚úÖ Certbot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚úÖ Certbot –Ω–∞–π–¥–µ–Ω"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ nginx
create_https_config() {
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    cat > nginx/conf.d/rit-utils-https.conf << EOF
# Upstream –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
upstream fastapi_backend {
    server app:8000;
}

# –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –Ω–∞ HTTPS
server {
    listen 80;
    server_name $DOMAIN;
    
    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –Ω–∞ HTTPS
    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

# HTTPS —Å–µ—Ä–≤–µ—Ä
server {
    listen 443 ssl http2;
    server_name $DOMAIN;
    
    # SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    ssl_certificate /etc/nginx/ssl/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/$DOMAIN/privkey.pem;
    
    # SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # –õ–∏–º–∏—Ç—ã
    client_max_body_size 20M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
    location / {
        proxy_pass http://fastapi_backend;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # –¢–∞–π–º–∞—É—Ç—ã
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # –î–ª—è WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    location /static/ {
        proxy_pass http://fastapi_backend;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
        expires 30d;
        add_header Cache-Control "public, immutable";
    }

    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    location = /favicon.ico {
        access_log off;
        log_not_found off;
        return 204;
    }
    
    location = /robots.txt {
        access_log off;
        log_not_found off;
        return 200 "User-agent: *\nDisallow: /\n";
        add_header Content-Type text/plain;
    }

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª—É–∂–µ–±–Ω—ã–º —Ñ–∞–π–ª–∞–º
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF

    echo "‚úÖ HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
get_certificate() {
    echo "üîí –ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è webroot
    sudo mkdir -p /var/www/certbot
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ nginx –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    docker-compose stop nginx
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    sudo certbot certonly \
        --webroot \
        --webroot-path=/var/www/certbot \
        --email admin@$DOMAIN \
        --agree-tos \
        --no-eff-email \
        -d $DOMAIN
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ nginx –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    sudo cp -R /etc/letsencrypt/live/$DOMAIN nginx/ssl/live/
    sudo cp -R /etc/letsencrypt/archive/$DOMAIN nginx/ssl/archive/
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤
    sudo chown -R $USER:$USER nginx/ssl/
    
    echo "‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω"
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker Compose –¥–ª—è HTTPS
update_docker_compose() {
    echo "üê≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ volume –¥–ª—è certbot
    if ! grep -q "certbot" docker-compose.yml; then
        cat >> docker-compose.yml << EOF

  # Certbot –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  certbot:
    image: certbot/certbot
    container_name: rit-utils-certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    command: sleep infinity
EOF
    fi
    
    echo "‚úÖ Docker Compose –æ–±–Ω–æ–≤–ª–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
setup_auto_renewal() {
    echo "üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    cat > renew-cert.sh << 'EOF'
#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞

echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
docker-compose run --rm certbot renew

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
if [ -d "/etc/letsencrypt/live" ]; then
    sudo cp -R /etc/letsencrypt/live/* nginx/ssl/live/
    sudo chown -R $USER:$USER nginx/ssl/
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ nginx
    docker-compose restart nginx
    
    echo "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"
else
    echo "‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi
EOF

    chmod +x renew-cert.sh
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ crontab
    (crontab -l 2>/dev/null; echo "0 12 * * * $(pwd)/renew-cert.sh >> $(pwd)/certbot.log 2>&1") | crontab -
    
    echo "‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00)"
}

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HTTPS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
switch_to_https() {
    echo "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HTTPS..."
    
    # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    cp nginx/conf.d/rit-utils.conf nginx/conf.d/rit-utils.conf.backup
    
    # –ó–∞–º–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    mv nginx/conf.d/rit-utils.conf nginx/conf.d/rit-utils-http.conf.disabled
    mv nginx/conf.d/rit-utils-https.conf nginx/conf.d/rit-utils.conf
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose up -d
    
    echo "‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ HTTPS –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
post_setup_info() {
    echo ""
    echo "üéâ HTTPS —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!"
    echo ""
    echo "üåê –í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É:"
    echo "   https://$DOMAIN"
    echo ""
    echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:"
    echo "   –î–æ–º–µ–Ω: $DOMAIN"
    echo "   –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –í–∫–ª—é—á–µ–Ω–æ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12:00)"
    echo ""
    echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ./renew-cert.sh"
    echo "   –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ certbot: cat certbot.log"
    echo "   –°—Ç–∞—Ç—É—Å SSL: curl -I https://$DOMAIN"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    check_certbot
    create_https_config
    get_certificate
    update_docker_compose
    setup_auto_renewal
    switch_to_https
    post_setup_info
}

# –ó–∞–ø—É—Å–∫
main "$@"
